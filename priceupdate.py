# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'priceupdate.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import threading
from Toexcel import *
from dataTransfer import *
from automation import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedWidth(849)
        MainWindow.setFixedHeight(535)
        MainWindow.setWindowIcon(QtGui.QIcon("logo.png"))
        MainWindow.setStyleSheet("background-color: #0F2D41")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 161, 541))
        self.frame.setStyleSheet("background-color: #1C252C")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.priceBtn = QtWidgets.QPushButton(self.frame)
        self.priceBtn.setGeometry(QtCore.QRect(0, 20, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.priceBtn.setFont(font)
        self.priceBtn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    border: none;\n"
"    border-bottom: 1px solid gray;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #13619E\n"
"}")
        self.priceBtn.setObjectName("priceBtn")
        self.invoiceBtn = QtWidgets.QPushButton(self.frame)
        self.invoiceBtn.setGeometry(QtCore.QRect(0, 70, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.invoiceBtn.setFont(font)
        self.invoiceBtn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    border: none;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #13619E\n"
"}")
        self.invoiceBtn.setObjectName("invoiceBtn")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(160, -10, 721, 31))
        self.frame_2.setStyleSheet("background-color: #1C252C")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(160, 20, 691, 521))
        self.stackedWidget.setObjectName("stackedWidget")
        self.pricePage = QtWidgets.QWidget()
        self.pricePage.setStyleSheet("background-color: #144973")
        self.pricePage.setObjectName("pricePage")
        self.botRunBtn = QtWidgets.QPushButton(self.pricePage, clicked= lambda: self.thread())
        self.botRunBtn.setGeometry(QtCore.QRect(220, 50, 241, 61))
        font = QtGui.QFont()
        font.setPointSize(27)
        self.botRunBtn.setFont(font)
        self.botRunBtn.setStyleSheet("QPushButton {\n"
"    background-color: #237D69;\n"
"    color: white;\n"
"    border: none\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #3C8F7C\n"
"}")
        self.botRunBtn.setObjectName("botRunBtn")
        self.listWidget = QtWidgets.QListWidget(self.pricePage)
        self.listWidget.setGeometry(QtCore.QRect(80, 150, 521, 311))
        self.listWidget.setStyleSheet("background-color: black;\n"
"color: #1FCB0A;")
        self.listWidget.setObjectName("listWidget")
        self.stackedWidget.addWidget(self.pricePage)
        self.invoicePage = QtWidgets.QWidget()
        self.invoicePage.setStyleSheet("background-color: steelblue;")
        self.invoicePage.setObjectName("invoicePage")
        self.label_2 = QtWidgets.QLabel(self.invoicePage)
        self.label_2.setGeometry(QtCore.QRect(70, 200, 541, 111))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setItalic(True)
        font.setUnderline(True)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("text-decoration: underline;\n"
"color: white;\n"
"font-style: italic")
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.invoicePage)
        MainWindow.setCentralWidget(self.centralwidget)
        # Connec button to the page
        self.priceBtn.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.invoiceBtn.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Woodalls"))
        self.priceBtn.setText(_translate("MainWindow", "Price Update"))
        self.invoiceBtn.setText(_translate("MainWindow", "Invoice"))
        self.botRunBtn.setText(_translate("MainWindow", "Run Bot"))
        self.label_2.setText(_translate("MainWindow", "Hang on! We are Under maintenance"))

# Defining thread
    def thread(self):
        t1 = threading.Thread(target=self.botRun)
        t1.start()
# Running BOt
    def botRun(self):
        self.listWidget.clear()        
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
        try:                
                self.botRunBtn.setEnabled(False)
                self.listWidget.addItem("Running Bot")
                self.listWidget.addItem("Getting Data from server")
                # for save Data
                sku_list = [] 
                getDataFromServer(sku_list)
                # loggin to system
                logginToSystem(driver, self.listWidget)
                self.listWidget.addItem("Logging to the system")
                
                
                # Creating json array
                json_array_list = []

                # for result (xlsx sheet)
                resultoutputlist = []
                
                # Price Collecting
                priceCollector(driver, sku_list, json_array_list, resultoutputlist, self.listWidget)       
                        

                # ==========================
                # sending data to the server
                self.listWidget.addItem("Sending Data to the server")
                response = sendPricesToServer(json_array_list)
        

                # saving as excel file
                saveToExcel(response, resultoutputlist, self.listWidget)
                self.listWidget.addItem("Completed.")
                self.botRunBtn.setEnabled(True)
        except:
             print("Item Cleared")
             self.listWidget.clear()
             self.botRunBtn.setEnabled(True)
             driver.quit()

    def launch_Selenium_Thread(self):
        t = threading.Thread(target=self.log)
        t.start()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())